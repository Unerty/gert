{"version":3,"sources":["webpack:///./src/components/Path.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/functions/constants.ts"],"names":["Path","props","state","probability","initialProbability","additiveParameter","initialAdditiveParameter","render","id","this","style","backgroundColor","display","width","margin","padding","type","onChange","event","setState","Number","target","value","toString","min","step","max","React","App","distribution","s","m","r","a","b","p","pArray","TArray","lambda","sigma"],"mappings":"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","file":"component---src-pages-index-tsx-40f61cec1b6e5dc1d1cd.js","sourcesContent":["import * as React from 'react';\n\ninterface IProps {\n  id: number;\n  initialProbability: number;\n  initialAdditiveParameter: number;\n}\n\ninterface IState {\n  probability: number;\n  additiveParameter: number;\n}\n\nexport default class Path extends React.Component<IProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      probability: props.initialProbability,\n      additiveParameter: props.initialAdditiveParameter\n    };\n  }\n\n  render() {\n    const {id} = this.props;\n    const {probability, additiveParameter} = this.state;\n    return (\n      <div style={{\n        backgroundColor: 'sandybrown',\n        display: 'inline-block',\n        width: '150px',\n        margin: '0.5rem',\n        padding: '0.25rem'\n      }}>\n        <h3>Номер дуги: {id}</h3>\n        <span>Ціна, грн.:<br/></span>\n        <input type=\"number\" onChange={event => this.setState({ additiveParameter: Number(event.target.value) })}\n               value={additiveParameter.toString()} min={0} step={0.01}\n               style={{width: '100px'}}\n        />\n        <br/>\n        <span>Ймовірність: <strong> {probability}</strong><br/></span>\n        <input type={'range'} onChange={event => this.setState({ probability: Number(event.target.value) })}\n               value={probability.toString()} min={0} max={1} step={0.01}/>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport Path from '@/components/Path';\nimport {\n  BINOMIAL_DISTRIBUTION, CONTINIOUS_UNIFORM_DISTRIBUTION,\n  DISCRETE_DISTRIBUTION,\n  EXPONENTIAL_DISTRIBUTION,\n  GAMMA_DISTRIBUTION,\n  GEOMETRICAL_DISTRIBUTION,\n  NEGATIVE_BINOMIAL_DISTRIBUTION,\n  NORMAL_DISTRIBUTION,\n  PUASSON_DISTRIBUTION,\n} from '@/functions/constants';\n\ninterface IProps {\n}\n\ninterface IState {\n  distribution: string;\n  s: number;\n  m: number;\n  r: number;\n  a: number;\n  b: number;\n  p: number;\n  pArray: Array<number>;\n  TArray: Array<number>;\n  lambda: number;\n  sigma: number;\n}\n\nexport default class App extends React.Component<IProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      distribution: BINOMIAL_DISTRIBUTION,\n      s: 1,\n      m: 1,\n      r: 1,\n      a: 1,\n      b: 1,\n      p: 1,\n      pArray: [1],\n      TArray: [1],\n      lambda: 1,\n      sigma: 1\n    };\n  }\n\n  render() {\n    return (\n      <main style={{display: 'flex'}}>\n        <div style={{width: '50%'}}>\n        {/*<img src={\"https://github.com/Unerty/gert/blob/main/static/ris4.png?raw=true\"} width={'75%'}/>\n        <img src={\"https://github.com/Unerty/gert/blob/main/static/ris5.png?raw=true\"} width={'25%'}/>*/}\n\n        Оберіть розподіл:<br/>\n        <select value={this.state.distribution}\n                onChange={event => this.setState({ distribution: event.target.value})}>\n          <option value={BINOMIAL_DISTRIBUTION}>{BINOMIAL_DISTRIBUTION}</option>\n          <option value={DISCRETE_DISTRIBUTION}>{DISCRETE_DISTRIBUTION}</option>\n          <option value={EXPONENTIAL_DISTRIBUTION}>{EXPONENTIAL_DISTRIBUTION}</option>\n          <option value={GAMMA_DISTRIBUTION}>{GAMMA_DISTRIBUTION}</option>\n          <option value={GEOMETRICAL_DISTRIBUTION}>{GEOMETRICAL_DISTRIBUTION}</option>\n          <option value={NEGATIVE_BINOMIAL_DISTRIBUTION}>{NEGATIVE_BINOMIAL_DISTRIBUTION}</option>\n          <option value={NORMAL_DISTRIBUTION}>{NORMAL_DISTRIBUTION}</option>\n          <option value={PUASSON_DISTRIBUTION}>{PUASSON_DISTRIBUTION}</option>\n          <option value={CONTINIOUS_UNIFORM_DISTRIBUTION}>{CONTINIOUS_UNIFORM_DISTRIBUTION}</option>\n        </select><br/><br/>\n          Введіть змінні: <br/>\n          s = <input value={this.state.s}\n                     onChange={event => this.setState({ s: Number(event.target.value)})}/><br/>\n          m = <input value={this.state.m}\n                     onChange={event => this.setState({ m: Number(event.target.value)})}/><br/>\n          r = <input value={this.state.r}\n                     onChange={event => this.setState({ r: Number(event.target.value)})}/><br/>\n          a = <input value={this.state.a}\n                     onChange={event => this.setState({ a: Number(event.target.value)})}/><br/>\n          b = <input value={this.state.b}\n                     onChange={event => this.setState({ b: Number(event.target.value)})}/><br/>\n          p = <input value={this.state.p}\n                     onChange={event => this.setState({ p: Number(event.target.value)})}/><br/>\n          p1, p2, ... pn = <input/> <br/>\n          T1, T2, ... Tn = <input/> <br/>\n          lambda = <input value={this.state.lambda}\n                     onChange={event => this.setState({ lambda: Number(event.target.value)})}/><br/>\n          sigma = <input value={this.state.sigma}\n                     onChange={event => this.setState({ sigma: Number(event.target.value)})}/><br/>\n        </div>\n        <div style={{width: '50%'}}>\n          <Path id={1} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={2} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={3} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={4} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={5} initialProbability={1} initialAdditiveParameter={2000}/>\n\n          <Path id={6} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={7} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={8} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={9} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={10} initialProbability={1} initialAdditiveParameter={0}/>\n\n          <Path id={11} initialProbability={1} initialAdditiveParameter={10000}/>\n          <Path id={12} initialProbability={1} initialAdditiveParameter={1000}/>\n          <Path id={13} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={14} initialProbability={0.05} initialAdditiveParameter={0}/>\n          <Path id={15} initialProbability={1} initialAdditiveParameter={0}/>\n\n          <Path id={16} initialProbability={0.95} initialAdditiveParameter={0}/>\n          <Path id={17} initialProbability={1} initialAdditiveParameter={0}/>\n          <Path id={18} initialProbability={1} initialAdditiveParameter={500}/>\n        </div>\n\n      </main>\n    );\n  }\n}\n","export const BINOMIAL_DISTRIBUTION = 'Біноміальний розподіл';\nexport const DISCRETE_DISTRIBUTION = 'Дискретний розподіл';\nexport const EXPONENTIAL_DISTRIBUTION = 'Експоненціальний розподіл';\nexport const GAMMA_DISTRIBUTION = 'Гамма розподіл';\nexport const GEOMETRICAL_DISTRIBUTION = 'Геометричний розподіл';\nexport const NEGATIVE_BINOMIAL_DISTRIBUTION = \"Від'ємний біноміальний розподіл\";\nexport const NORMAL_DISTRIBUTION = 'Нормальний розподіл';\nexport const PUASSON_DISTRIBUTION = 'Розподіл Пуассона';\nexport const CONTINIOUS_UNIFORM_DISTRIBUTION = 'Рівномірний розподіл';\n"],"sourceRoot":""}