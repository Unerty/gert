{"version":3,"sources":["webpack:///./src/functions/constants.ts","webpack:///./src/components/Path.tsx","webpack:///./src/models/PathModel.tsx","webpack:///./src/pages/index.tsx"],"names":["Distribution","Path","props","render","BINOMIAL_DISTRIBUTION","CONTINIOUS_UNIFORM_DISTRIBUTION","EXPONENTIAL_DISTRIBUTION","GAMMA_DISTRIBUTION","GEOMETRICAL_DISTRIBUTION","NEGATIVE_BINOMIAL_DISTRIBUTION","NORMAL_DISTRIBUTION","PUASSON_DISTRIBUTION","nVisible","this","distribution","mVisible","rVisible","aVisible","bVisible","lambdaVisible","sigmaVisible","id","probability","additiveParameter","setAdditiveParameter","lambda","sigma","a","b","m","n","r","s","setProbability","setDistribution","style","backgroundColor","display","width","height","margin","padding","type","onChange","event","Number","target","value","toString","min","step","max","setState","React","PathModel","App","state","pathes","map","path"],"mappings":"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","file":"component---src-pages-index-tsx-9cd890ee248007588d6e.js","sourcesContent":["export enum Distribution {\n  BINOMIAL_DISTRIBUTION = 'Біноміальний розподіл',\n  DISCRETE_DISTRIBUTION = 'Дискретний розподіл',\n  EXPONENTIAL_DISTRIBUTION = 'Експоненціальний розподіл',\n  GAMMA_DISTRIBUTION = 'Гамма розподіл',\n  GEOMETRICAL_DISTRIBUTION = 'Геометричний розподіл',\n  NEGATIVE_BINOMIAL_DISTRIBUTION = 'Від\\'ємний біноміальний розподіл',\n  NORMAL_DISTRIBUTION = 'Нормальний розподіл',\n  PUASSON_DISTRIBUTION = 'Розподіл Пуассона',\n  CONTINIOUS_UNIFORM_DISTRIBUTION = 'Рівномірний розподіл',\n}\n","import * as React from 'react';\nimport PathModel from '@/models/PathModel';\nimport { Distribution } from '@/functions/constants';\n\ninterface IProps extends PathModel {\n  setAdditiveParameter: (additiveParameter: number) => void;\n  setProbability: (probability: number) => void;\n  setDistribution: (distribution: string) => void;\n}\n\nexport default class Path extends React.Component<IProps> {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { BINOMIAL_DISTRIBUTION, CONTINIOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n\n    const nVisible = (\n      this.props.distribution === BINOMIAL_DISTRIBUTION ||\n      this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const mVisible = this.props.distribution === NORMAL_DISTRIBUTION ? 'unset' : 'none';\n    const rVisible = this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION ? 'unset' : 'none';\n    const aVisible = (\n      this.props.distribution === EXPONENTIAL_DISTRIBUTION ||\n      this.props.distribution === GAMMA_DISTRIBUTION ||\n      this.props.distribution === CONTINIOUS_UNIFORM_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const bVisible = (\n      this.props.distribution === GAMMA_DISTRIBUTION ||\n      this.props.distribution === CONTINIOUS_UNIFORM_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const pVisible = (\n      this.props.distribution === BINOMIAL_DISTRIBUTION ||\n      this.props.distribution === GEOMETRICAL_DISTRIBUTION ||\n      this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const lambdaVisible = this.props.distribution === PUASSON_DISTRIBUTION ? 'unset' : 'none';\n    const sigmaVisible = this.props.distribution === NORMAL_DISTRIBUTION ? 'unset' : 'none';\n    const { id, probability, additiveParameter, distribution, lambda, sigma, a, b, m, n, r, s, setAdditiveParameter, setProbability, setDistribution } = this.props;\n    return (\n      <div style={{\n        backgroundColor: 'sandybrown',\n        display: 'inline-grid',\n        width: '250px',\n        height: '270px',\n        margin: '0.5rem',\n        padding: '0.25rem',\n      }}>\n        <div>\n          <h3>Номер дуги: {id}</h3>\n          <span>Вартість, грн.:<br/></span>\n          <input type=\"number\" onChange={event => setAdditiveParameter(Number(event.target.value))}\n                 value={additiveParameter.toString()} min={0} step={0.01}\n                 style={{ width: '100px' }}\n          />\n          <br/>\n          <span>Ймовірність: <strong> {probability}</strong><br/></span>\n          <input type={'range'} onChange={event => setProbability(Number(event.target.value))}\n                 value={probability.toString()} min={0} max={1} step={0.01}/><br/>\n          Розподіл:<br/>\n          <select value={this.props.distribution}\n                  onChange={event => setDistribution(event.target.value)}>\n            <option value={BINOMIAL_DISTRIBUTION}>{BINOMIAL_DISTRIBUTION}</option>\n            <option value={EXPONENTIAL_DISTRIBUTION}>{EXPONENTIAL_DISTRIBUTION}</option>\n            <option value={GAMMA_DISTRIBUTION}>{GAMMA_DISTRIBUTION}</option>\n            <option value={GEOMETRICAL_DISTRIBUTION}>{GEOMETRICAL_DISTRIBUTION}</option>\n            <option value={NEGATIVE_BINOMIAL_DISTRIBUTION}>{NEGATIVE_BINOMIAL_DISTRIBUTION}</option>\n            <option value={NORMAL_DISTRIBUTION}>{NORMAL_DISTRIBUTION}</option>\n            <option value={PUASSON_DISTRIBUTION}>{PUASSON_DISTRIBUTION}</option>\n            <option value={CONTINIOUS_UNIFORM_DISTRIBUTION}>{CONTINIOUS_UNIFORM_DISTRIBUTION}</option>\n          </select>\n        </div>\n        <div style={{ display: nVisible }}>\n          <br/>\n          n = <input value={this.props.n}\n                     onChange={event => this.setState({ n: Number(event.target.value) })}/><br/>\n        </div>\n        <div style={{ display: mVisible }}>\n          <br/>\n          m = <input value={this.props.m}\n                     onChange={event => this.setState({ m: Number(event.target.value) })}/><br/>\n        </div>\n        <div style={{ display: rVisible }}>\n          <br/>\n          r = <input value={this.props.r}\n                     onChange={event => this.setState({ r: Number(event.target.value) })}/><br/>\n        </div>\n        <div style={{ display: aVisible }}>\n          <br/>\n          a = <input value={this.props.a}\n                     onChange={event => this.setState({ a: Number(event.target.value) })}/><br/>\n        </div>\n        <div style={{ display: bVisible }}>\n          <br/>\n          b = <input value={this.props.b}\n                     onChange={event => this.setState({ b: Number(event.target.value) })}/><br/>\n        </div>\n        <div style={{ display: lambdaVisible }}>\n          <br/>\n          lambda = <input value={this.props.lambda}\n                          onChange={event => this.setState({ lambda: Number(event.target.value) })}/><br/>\n        </div>\n        <div style={{ display: sigmaVisible }}>\n          <br/>\n          sigma = <input value={this.props.sigma}\n                         onChange={event => this.setState({ sigma: Number(event.target.value) })}/><br/>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Distribution } from '@/functions/constants';\n\nexport default class PathModel {\n  constructor(id: number, probability: number, additiveParameter: number, distribution: Distribution, s: number, n: number, m: number, r: number, a: number, b: number, lambda: number, sigma: number) {\n    this.id = id;\n    this.probability = probability;\n    this.additiveParameter = additiveParameter;\n    this.distribution = distribution;\n    this.s = s;\n    this.n = n;\n    this.m = m;\n    this.r = r;\n    this.a = a;\n    this.b = b;\n    this.lambda = lambda;\n    this.sigma = sigma;\n  }\n  id: number;\n  probability: number;\n  additiveParameter: number;\n  distribution: Distribution;\n  s: number;\n  n: number;\n  m: number;\n  r: number;\n  a: number;\n  b: number;\n  lambda: number;\n  sigma: number;\n}\n","import * as React from 'react';\nimport Path from '@/components/Path';\nimport { Distribution } from '@/functions/constants';\nimport PathModel from '@/models/PathModel';\n\nconst { BINOMIAL_DISTRIBUTION, CONTINIOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n\n\ninterface IProps {\n}\n\ninterface IState {\n  pathes: Array<PathModel>\n}\n\nexport default class App extends React.Component<IProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pathes: [\n        new PathModel(1, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(2, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(3, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(4, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(5, 1, 2000, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(6, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(7, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(8, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(9, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(10, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(11, 1, 10000, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(12, 1, 1000, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(13, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(14, 0.05, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(15, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(16, 0.95, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(17, 1, 0, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(18, 1, 500, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n      ],\n    };\n  }\n\n  render() {\n    const { pathes } = this.state;\n    return (\n      <main>\n        <div style={{ display: 'flex' }}>\n          <div>\n            {pathes.map(\n              path => <Path id={path.id}\n                            probability={path.probability}\n                            additiveParameter={path.additiveParameter}\n                            distribution={path.distribution}\n                            s={path.s}\n                            m={path.m}\n                            r={path.r}\n                            n={path.n}\n                            a={path.a}\n                            b={path.b}\n                            lambda={path.lambda}\n                            sigma={path.sigma}\n                            setAdditiveParameter={(additiveParameter: number) => {\n                              let pathes = this.state.pathes;\n                              path.additiveParameter = additiveParameter;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setProbability= {(probability: number) => {\n                              let pathes = this.state.pathes;\n                              path.probability = probability;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setDistribution={(distribution: Distribution) => {\n                              let pathes = this.state.pathes;\n                              path.distribution = distribution;\n                              this.setState({ pathes: pathes });\n                            }}\n\n              />\n            )}\n\n          </div>\n        </div>\n        Результати:\n        µ = 12,879, σ<sup>2</sup> = 9,211\n\n      </main>\n    );\n  }\n}\n"],"sourceRoot":""}