{"version":3,"sources":["webpack:///./src/functions/constants.ts","webpack:///./src/components/Path.tsx","webpack:///./src/models/PathModel.tsx","webpack:///./src/functions/functions.ts","webpack:///./src/pages/index.tsx"],"names":["Distribution","Path","props","render","BINOMIAL_DISTRIBUTION","CONTINUOUS_UNIFORM_DISTRIBUTION","EXPONENTIAL_DISTRIBUTION","GAMMA_DISTRIBUTION","GEOMETRICAL_DISTRIBUTION","NEGATIVE_BINOMIAL_DISTRIBUTION","NORMAL_DISTRIBUTION","PUASSON_DISTRIBUTION","nVisible","this","distribution","mVisible","rVisible","aVisible","bVisible","lambdaVisible","sigmaVisible","id","probability","lambda","sigma","a","b","m","n","r","s","setProbability","setDistribution","setA","setB","setM","setN","setR","setS","setLambda","setSigma","style","backgroundColor","display","width","height","margin","padding","type","onChange","event","Number","target","value","toString","min","step","max","React","PathModel","wEsFunction","W1","W2","W3","W4","W5","W6","W7","W8","W9","W10","W11","W12","W13","W14","W15","W16","W17","W18","calculateDistributionMomentGeneratingFunctionForPath","path","isSEqualZero","moment","p","Math","pow","E","binomialDistributionMomentGeneratingFunction","continuousUniformDistributionMomentGeneratingFunction","exponentialDistributionMomentGeneratingFunction","gammaDistributionMomentGeneratingFunction","geometricalDistributionMomentGeneratingFunction","negativeBinomialDistributionMomentGeneratingFunction","normalDistributionMomentGeneratingFunction","puassonDistributionMomentGeneratingFunction","calculateDistributionExpectedValueForPath","binomialDistributionExpectedValueFunction","continuousUniformDistributionExpectedValueFunction","exponentialDistributionExpectedValueFunction","gammaDistributionExpectedValueFunction","negativeBinomialDistributionExpectedValueFunction","calculateDistributionSecondMomentForPath","binomialDistributionSecondMomentFunction","continuousUniformDistributionSecondMomentFunction","exponentialDistributionSecondMomentFunction","gammaDistributionSecondMomentFunction","negativeBinomialDistributionSecondMomentFunction","normalDistributionSecondMomentFunction","puassonDistributionSecondMomentFunction","App","state","pathes","map","setState"],"mappings":"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","file":"component---src-pages-index-tsx-c166bc4f6fdc833d49a5.js","sourcesContent":["export enum Distribution {\n  BINOMIAL_DISTRIBUTION = 'Біноміальний розподіл',\n  EXPONENTIAL_DISTRIBUTION = 'Експоненціальний розподіл',\n  GAMMA_DISTRIBUTION = 'Гамма розподіл',\n  GEOMETRICAL_DISTRIBUTION = 'Геометричний розподіл',\n  NEGATIVE_BINOMIAL_DISTRIBUTION = 'Від\\'ємний біноміальний розподіл',\n  NORMAL_DISTRIBUTION = 'Нормальний розподіл',\n  PUASSON_DISTRIBUTION = 'Розподіл Пуассона',\n  CONTINUOUS_UNIFORM_DISTRIBUTION = 'Рівномірний розподіл',\n}\n","import * as React from 'react';\nimport PathModel from '@/models/PathModel';\nimport { Distribution } from '@/functions/constants';\n\ninterface IProps extends PathModel {\n  setProbability: (probability: number) => void;\n  setDistribution: (distribution: string) => void;\n  setA: (a: number) => void;\n  setB: (b: number) => void;\n  setM: (M: number) => void;\n  setN: (n: number) => void;\n  setR: (r: number) => void;\n  setS: (s: number) => void;\n  setLambda: (lambda: number) => void;\n  setSigma: (sigma: number) => void;\n}\n\nexport default class Path extends React.Component<IProps> {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n\n    const nVisible = (\n      this.props.distribution === BINOMIAL_DISTRIBUTION ||\n      this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const mVisible = this.props.distribution === NORMAL_DISTRIBUTION ? 'unset' : 'none';\n    const rVisible = this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION ? 'unset' : 'none';\n    const aVisible = (\n      this.props.distribution === EXPONENTIAL_DISTRIBUTION ||\n      this.props.distribution === GAMMA_DISTRIBUTION ||\n      this.props.distribution === CONTINUOUS_UNIFORM_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const bVisible = (\n      this.props.distribution === GAMMA_DISTRIBUTION ||\n      this.props.distribution === CONTINUOUS_UNIFORM_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const pVisible = (\n      this.props.distribution === BINOMIAL_DISTRIBUTION ||\n      this.props.distribution === GEOMETRICAL_DISTRIBUTION ||\n      this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const lambdaVisible = this.props.distribution === PUASSON_DISTRIBUTION ? 'unset' : 'none';\n    const sigmaVisible = this.props.distribution === NORMAL_DISTRIBUTION ? 'unset' : 'none';\n    const {\n      id,\n      probability,\n      distribution,\n      lambda,\n      sigma,\n      a,\n      b,\n      m,\n      n,\n      r,\n      s,\n      setProbability,\n      setDistribution,\n      setA,\n      setB,\n      setM,\n      setN,\n      setR,\n      setS,\n      setLambda,\n      setSigma,\n    } = this.props;\n    return (\n      <div style={{\n        backgroundColor: 'sandybrown',\n        display: 'inline-grid',\n        width: '250px',\n        height: '270px',\n        margin: '0.5rem',\n        padding: '0.25rem',\n      }}>\n        <div>\n          <h3>Номер дуги: {id}</h3>\n          <span>s = </span>\n          <input type=\"number\" onChange={event => setS(Number(event.target.value))}\n                 value={s.toString()} min={0} step={0.01}\n                 style={{ width: '100px' }}\n          />\n          <br/>\n          <span>Ймовірність: <strong> {probability}</strong><br/></span>\n          <input type={'range'} onChange={event => setProbability(Number(event.target.value))}\n                 value={probability.toString()} min={0} max={1} step={0.01}/><br/>\n          Розподіл:<br/>\n          <select value={distribution}\n                  onChange={event => setDistribution(event.target.value)}>\n            <option value={BINOMIAL_DISTRIBUTION}>{BINOMIAL_DISTRIBUTION}</option>\n            <option value={EXPONENTIAL_DISTRIBUTION}>{EXPONENTIAL_DISTRIBUTION}</option>\n            <option value={GAMMA_DISTRIBUTION}>{GAMMA_DISTRIBUTION}</option>\n            <option value={GEOMETRICAL_DISTRIBUTION}>{GEOMETRICAL_DISTRIBUTION}</option>\n            <option value={NEGATIVE_BINOMIAL_DISTRIBUTION}>{NEGATIVE_BINOMIAL_DISTRIBUTION}</option>\n            <option value={NORMAL_DISTRIBUTION}>{NORMAL_DISTRIBUTION}</option>\n            <option value={PUASSON_DISTRIBUTION}>{PUASSON_DISTRIBUTION}</option>\n            <option value={CONTINUOUS_UNIFORM_DISTRIBUTION}>{CONTINUOUS_UNIFORM_DISTRIBUTION}</option>\n          </select>\n        </div>\n        <div style={{ display: nVisible }}>\n          <br/>\n          n = <input type={'number'} value={n}\n                     onChange={event => setN(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: mVisible }}>\n          <br/>\n          m = <input type={'number'} value={m}\n                     onChange={event => setM(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: rVisible }}>\n          <br/>\n          r = <input type={'number'} value={r}\n                     onChange={event => setR(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: aVisible }}>\n          <br/>\n          a = <input type=\"number\" value={a}\n                     onChange={event => setA(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: bVisible }}>\n          <br/>\n          b = <input type=\"number\" value={b}\n                     onChange={event => setB(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: lambdaVisible }}>\n          <br/>\n          lambda = <input type=\"number\" value={lambda}\n                          onChange={event => setLambda(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: sigmaVisible }}>\n          <br/>\n          sigma = <input type=\"number\" value={sigma}\n                         onChange={event => setSigma(Number(event.target.value))}/><br/>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Distribution } from '@/functions/constants';\n\nexport default class PathModel {\n  constructor(id: number, probability: number, distribution: Distribution, s: number, n: number, m: number, r: number, a: number, b: number, lambda: number, sigma: number) {\n    this.id = id;\n    this.probability = probability;\n    this.distribution = distribution;\n    this.s = s;\n    this.n = n;\n    this.m = m;\n    this.r = r;\n    this.a = a;\n    this.b = b;\n    this.lambda = lambda;\n    this.sigma = sigma;\n  }\n  id: number;\n  probability: number;\n  distribution: Distribution;\n  s: number;\n  n: number;\n  m: number;\n  r: number;\n  a: number;\n  b: number;\n  lambda: number;\n  sigma: number;\n}\n","import { Distribution } from '@/functions/constants';\nimport PathModel from '@/models/PathModel';\n\nexport function wEsFunction(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18) {\n  return ((W1 * W3 + W2 * W4 * W5 * W6) * W7 * W8 * (W9 * W11 + W10 * W12) * W13 * W16 * W17 * W18) / ((1 - W8 * (W9 * W11 + W10 * W12) * W13 * W14 * W15));\n}\n\nexport function binomialDistributionMomentGeneratingFunction(s: number, n: number, p: number) {\n  return Math.pow((p * Math.pow(Math.E, s) + 1 - p), n);\n}\n\nexport function exponentialDistributionMomentGeneratingFunction(s: number, a: number) {\n  return Math.pow((1 - (s / a)), -1);\n}\n\nexport function gammaDistributionMomentGeneratingFunction(s: number, a: number, b: number) {\n  return Math.pow((1 - (s / a)), (-1 * b));\n}\n\nexport function geometricalDistributionMomentGeneratingFunction(s: number, p: number) {\n  let nominator: number = p * Math.pow(Math.E, s);\n  let denominator: number = (1 - Math.pow(Math.E, s) + p * Math.pow(Math.E, s));\n  return (nominator / denominator);\n}\n\nexport function negativeBinomialDistributionMomentGeneratingFunction(s: number, p: number, r: number) {\n  return Math.pow(p / (1 - Math.pow(Math.E, s) + p * Math.pow(Math.E, s)), r);\n}\n\nexport function normalDistributionMomentGeneratingFunction(s: number, m: number, sigma: number) {\n  return Math.pow(Math.E, s * m + (1 / 2) * s * s * sigma * sigma);\n}\n\nexport function puassonDistributionMomentGeneratingFunction(s: number, lambda: number) {\n  return Math.pow(Math.E, lambda * (Math.pow(Math.E, s) - 1));\n}\n\nexport function continuousUniformDistributionMomentGeneratingFunction(s: number, a: number, b: number) {\n  let nominator: number = Math.pow(Math.E, s * a) - Math.pow(Math.E, s * b);\n  let denominator: number = (a - b) * s;\n  return (nominator / denominator);\n}\n\n\nexport function binomialDistributionExpectedValueFunction(n: number, p: number) {\n  return n * p;\n}\n\nexport function exponentialDistributionExpectedValueFunction(a: number) {\n  return 1 / a;\n}\n\nexport function gammaDistributionExpectedValueFunction(b: number, a: number) {\n  return b / a;\n}\n\nexport function geometricalDistributionExpectedValueFunction(p: number) {\n  return 1 / p;\n}\n\nexport function negativeBinomialDistributionExpectedValueFunction(r: number, p: number) {\n  return (r * (1 - p)) / p;\n}\n\nexport function normalDistributionExpectedValueFunction(m: number) {\n  return m;\n}\n\nexport function puassonDistributionExpectedValueFunction(lambda: number) {\n  return lambda;\n}\n\nexport function continuousUniformDistributionExpectedValueFunction(a: number, b: number) {\n  return (a + b) / 2;\n}\n\n\nexport function binomialDistributionSecondMomentFunction(n: number, p: number) {\n  return n * p * (n * p + 1 - p);\n}\n\nexport function exponentialDistributionSecondMomentFunction(a: number) {\n  return 2 / (a * a);\n}\n\nexport function gammaDistributionSecondMomentFunction(b: number, a: number) {\n  return b * (b + 1) / (a * a);\n}\n\nexport function geometricalDistributionSecondMomentFunction(p: number) {\n  return (2 - p) / (p * p);\n}\n\nexport function negativeBinomialDistributionSecondMomentFunction(r: number, p: number) {\n  return (r * (1 - p) * (1 + r - r * p)) / (p * p);\n}\n\nexport function normalDistributionSecondMomentFunction(m: number, sigma: number) {\n  return m * m + sigma * sigma;\n}\n\nexport function puassonDistributionSecondMomentFunction(lambda: number) {\n  return lambda * (1 + lambda);\n}\n\nexport function continuousUniformDistributionSecondMomentFunction(a: number, b: number) {\n  return (a * a + a * b + b * b) / 3;\n}\n\n\nexport function calculateDistributionMomentGeneratingFunctionForPath(path: PathModel, isSEqualZero: boolean) {\n  let moment: number;\n  let W: number;\n  const { a, distribution, sigma, lambda, probability, b, m, n, r } = path;\n  let s = isSEqualZero ? 0 : path.s;\n  const { BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n  switch (distribution) {\n    case BINOMIAL_DISTRIBUTION: {\n      moment = binomialDistributionMomentGeneratingFunction(s, n, probability);\n      break;\n    }\n    case CONTINUOUS_UNIFORM_DISTRIBUTION: {\n      moment = continuousUniformDistributionMomentGeneratingFunction(s, a, b);\n      break;\n    }\n    case EXPONENTIAL_DISTRIBUTION: {\n      moment = exponentialDistributionMomentGeneratingFunction(s, a);\n      break;\n    }\n    case GAMMA_DISTRIBUTION: {\n      moment = gammaDistributionMomentGeneratingFunction(s, a, b);\n      break;\n    }\n    case GEOMETRICAL_DISTRIBUTION: {\n      moment = geometricalDistributionMomentGeneratingFunction(s, probability);\n      break;\n    }\n    case NEGATIVE_BINOMIAL_DISTRIBUTION: {\n      moment = negativeBinomialDistributionMomentGeneratingFunction(s, probability, r);\n      break;\n    }\n    case NORMAL_DISTRIBUTION: {\n      moment = normalDistributionMomentGeneratingFunction(s, m, sigma);\n      break;\n    }\n    case PUASSON_DISTRIBUTION: {\n      moment = puassonDistributionMomentGeneratingFunction(s, lambda);\n      break;\n    }\n  }\n  W = moment * probability;\n  return W;\n}\n\nexport function calculateDistributionExpectedValueForPath(path: PathModel) {\n  let moment: number;\n  let W: number;\n  const { a, distribution, lambda, probability, b, m, n, r } = path;\n  const { BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n  switch (distribution) {\n    case BINOMIAL_DISTRIBUTION: {\n      moment = binomialDistributionExpectedValueFunction(n, probability);\n      break;\n    }\n    case CONTINUOUS_UNIFORM_DISTRIBUTION: {\n      moment = continuousUniformDistributionExpectedValueFunction(a, b);\n      break;\n    }\n    case EXPONENTIAL_DISTRIBUTION: {\n      moment = exponentialDistributionExpectedValueFunction(a);\n      break;\n    }\n    case GAMMA_DISTRIBUTION: {\n      moment = gammaDistributionExpectedValueFunction(a, b);\n      break;\n    }\n    case GEOMETRICAL_DISTRIBUTION: {\n      moment = geometricalDistributionExpectedValueFunction(probability);\n      break;\n    }\n    case NEGATIVE_BINOMIAL_DISTRIBUTION: {\n      moment = negativeBinomialDistributionExpectedValueFunction(probability, r);\n      break;\n    }\n    case NORMAL_DISTRIBUTION: {\n      moment = normalDistributionExpectedValueFunction(m);\n      break;\n    }\n    case PUASSON_DISTRIBUTION: {\n      moment = puassonDistributionExpectedValueFunction(lambda);\n      break;\n    }\n  }\n  W = moment * probability;\n  return W;\n}\n\nexport function calculateDistributionSecondMomentForPath(path: PathModel) {\n  let moment: number;\n  let W: number;\n  const { a, distribution, lambda, sigma, probability, b, m, n, r } = path;\n  const { BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n  switch (distribution) {\n    case BINOMIAL_DISTRIBUTION: {\n      moment = binomialDistributionSecondMomentFunction(n, probability);\n      break;\n    }\n    case CONTINUOUS_UNIFORM_DISTRIBUTION: {\n      moment = continuousUniformDistributionSecondMomentFunction(a, b);\n      break;\n    }\n    case EXPONENTIAL_DISTRIBUTION: {\n      moment = exponentialDistributionSecondMomentFunction(a);\n      break;\n    }\n    case GAMMA_DISTRIBUTION: {\n      moment = gammaDistributionSecondMomentFunction(a, b);\n      break;\n    }\n    case GEOMETRICAL_DISTRIBUTION: {\n      moment = geometricalDistributionSecondMomentFunction(probability);\n      break;\n    }\n    case NEGATIVE_BINOMIAL_DISTRIBUTION: {\n      moment = negativeBinomialDistributionSecondMomentFunction(probability, r);\n      break;\n    }\n    case NORMAL_DISTRIBUTION: {\n      moment = normalDistributionSecondMomentFunction(m, sigma);\n      break;\n    }\n    case PUASSON_DISTRIBUTION: {\n      moment = puassonDistributionSecondMomentFunction(lambda);\n      break;\n    }\n  }\n  W = moment * probability;\n  return W;\n}\n","import * as React from 'react';\nimport Path from '@/components/Path';\nimport { Distribution } from '@/functions/constants';\nimport PathModel from '@/models/PathModel';\nimport {\n  calculateDistributionExpectedValueForPath,\n  calculateDistributionMomentGeneratingFunctionForPath,\n  calculateDistributionSecondMomentForPath,\n  wEsFunction,\n} from '@/functions/functions';\n\nconst { BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n\n\ninterface IProps {\n}\n\ninterface IState {\n  pathes: Array<PathModel>\n}\n\nexport default class App extends React.Component<IProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pathes: [\n        new PathModel(1, 0.6, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(2, 0.4, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(3, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(4, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(5, 1, GAMMA_DISTRIBUTION, 2, 1, 1, 1, 0.5, 1, 1, 1),\n        new PathModel(6, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(7, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(8, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(9, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(10, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(11, 1, NORMAL_DISTRIBUTION, 10, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(12, 1, NORMAL_DISTRIBUTION, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(13, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(14, 0.05, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(15, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(16, 0.95,NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(17, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(18, 1, NORMAL_DISTRIBUTION, 0.5, 1, 1, 1, 1, 1, 1, 1),\n      ],\n    };\n  }\n\n  render() {\n    const { pathes } = this.state;\n    return (\n      <main>\n        <div style={{ display: 'flex' }}>\n          <div>\n            {pathes.map(\n              path => <Path id={path.id}\n                            probability={path.probability}\n                            distribution={path.distribution}\n                            s={path.s}\n                            m={path.m}\n                            r={path.r}\n                            n={path.n}\n                            a={path.a}\n                            b={path.b}\n                            lambda={path.lambda}\n                            sigma={path.sigma}\n                            setProbability={(probability: number) => {\n                              let pathes = this.state.pathes;\n                              path.probability = probability;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setDistribution={(distribution: Distribution) => {\n                              let pathes = this.state.pathes;\n                              path.distribution = distribution;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setA={(a: number) => {\n                              let pathes = this.state.pathes;\n                              path.a = a;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setB={(b: number) => {\n                              let pathes = this.state.pathes;\n                              path.b = b;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setM={(m: number) => {\n                              let pathes = this.state.pathes;\n                              path.m = m;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setN={(n: number) => {\n                              let pathes = this.state.pathes;\n                              path.n = n;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setR={(r: number) => {\n                              let pathes = this.state.pathes;\n                              path.r = r;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setS={(s: number) => {\n                              let pathes = this.state.pathes;\n                              path.s = s;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setLambda={(lambda: number) => {\n                              let pathes = this.state.pathes;\n                              path.lambda = lambda;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setSigma={(sigma: number) => {\n                              let pathes = this.state.pathes;\n                              path.sigma = sigma;\n                              this.setState({ pathes: pathes });\n                            }}\n\n              />,\n            )}\n\n          </div>\n        </div>\n        Результати: <br/>\n        W<small>E</small>(s) = {wEsFunction(\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[0], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[1], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[2], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[3], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[4], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[5], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[6], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[7], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[8], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[9], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[10], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[11], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[12], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[13], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[14], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[15], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[16], false),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[17], false),\n      )},<br/>\n        W<small>E</small>(0) = {wEsFunction(\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[0], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[1], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[2], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[3], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[4], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[5], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[6], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[7], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[8], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[9], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[10], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[11], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[12], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[13], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[14], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[15], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[16], true),\n        calculateDistributionMomentGeneratingFunctionForPath(pathes[17], true),\n      )},<br/>\n        p<small>E</small> = {wEsFunction(\n        pathes[0].probability,\n        pathes[1].probability,\n        pathes[2].probability,\n        pathes[3].probability,\n        pathes[4].probability,\n        pathes[5].probability,\n        pathes[6].probability,\n        pathes[7].probability,\n        pathes[8].probability,\n        pathes[9].probability,\n        pathes[10].probability,\n        pathes[11].probability,\n        pathes[12].probability,\n        pathes[13].probability,\n        pathes[14].probability,\n        pathes[15].probability,\n        pathes[16].probability,\n        pathes[17].probability,\n      )},<br/>\n        µ = {wEsFunction(\n        calculateDistributionExpectedValueForPath(pathes[0]),\n        calculateDistributionExpectedValueForPath(pathes[1]),\n        calculateDistributionExpectedValueForPath(pathes[2]),\n        calculateDistributionExpectedValueForPath(pathes[3]),\n        calculateDistributionExpectedValueForPath(pathes[4]),\n        calculateDistributionExpectedValueForPath(pathes[5]),\n        calculateDistributionExpectedValueForPath(pathes[6]),\n        calculateDistributionExpectedValueForPath(pathes[7]),\n        calculateDistributionExpectedValueForPath(pathes[8]),\n        calculateDistributionExpectedValueForPath(pathes[9]),\n        calculateDistributionExpectedValueForPath(pathes[10]),\n        calculateDistributionExpectedValueForPath(pathes[11]),\n        calculateDistributionExpectedValueForPath(pathes[12]),\n        calculateDistributionExpectedValueForPath(pathes[13]),\n        calculateDistributionExpectedValueForPath(pathes[14]),\n        calculateDistributionExpectedValueForPath(pathes[15]),\n        calculateDistributionExpectedValueForPath(pathes[16]),\n        calculateDistributionExpectedValueForPath(pathes[17]),\n      )},<br/>\n        Другий момент = {wEsFunction(\n        calculateDistributionSecondMomentForPath(pathes[0]),\n        calculateDistributionSecondMomentForPath(pathes[1]),\n        calculateDistributionSecondMomentForPath(pathes[2]),\n        calculateDistributionSecondMomentForPath(pathes[3]),\n        calculateDistributionSecondMomentForPath(pathes[4]),\n        calculateDistributionSecondMomentForPath(pathes[5]),\n        calculateDistributionSecondMomentForPath(pathes[6]),\n        calculateDistributionSecondMomentForPath(pathes[7]),\n        calculateDistributionSecondMomentForPath(pathes[8]),\n        calculateDistributionSecondMomentForPath(pathes[9]),\n        calculateDistributionSecondMomentForPath(pathes[10]),\n        calculateDistributionSecondMomentForPath(pathes[11]),\n        calculateDistributionSecondMomentForPath(pathes[12]),\n        calculateDistributionSecondMomentForPath(pathes[13]),\n        calculateDistributionSecondMomentForPath(pathes[14]),\n        calculateDistributionSecondMomentForPath(pathes[15]),\n        calculateDistributionSecondMomentForPath(pathes[16]),\n        calculateDistributionSecondMomentForPath(pathes[17]),\n      )},<br/>\n        σ<sup>2</sup> = {\n        wEsFunction(\n          calculateDistributionSecondMomentForPath(pathes[0]),\n          calculateDistributionSecondMomentForPath(pathes[1]),\n          calculateDistributionSecondMomentForPath(pathes[2]),\n          calculateDistributionSecondMomentForPath(pathes[3]),\n          calculateDistributionSecondMomentForPath(pathes[4]),\n          calculateDistributionSecondMomentForPath(pathes[5]),\n          calculateDistributionSecondMomentForPath(pathes[6]),\n          calculateDistributionSecondMomentForPath(pathes[7]),\n          calculateDistributionSecondMomentForPath(pathes[8]),\n          calculateDistributionSecondMomentForPath(pathes[9]),\n          calculateDistributionSecondMomentForPath(pathes[10]),\n          calculateDistributionSecondMomentForPath(pathes[11]),\n          calculateDistributionSecondMomentForPath(pathes[12]),\n          calculateDistributionSecondMomentForPath(pathes[13]),\n          calculateDistributionSecondMomentForPath(pathes[14]),\n          calculateDistributionSecondMomentForPath(pathes[15]),\n          calculateDistributionSecondMomentForPath(pathes[16]),\n          calculateDistributionSecondMomentForPath(pathes[17]),\n        ) - Math.pow(wEsFunction(\n          calculateDistributionExpectedValueForPath(pathes[0]),\n          calculateDistributionExpectedValueForPath(pathes[1]),\n          calculateDistributionExpectedValueForPath(pathes[2]),\n          calculateDistributionExpectedValueForPath(pathes[3]),\n          calculateDistributionExpectedValueForPath(pathes[4]),\n          calculateDistributionExpectedValueForPath(pathes[5]),\n          calculateDistributionExpectedValueForPath(pathes[6]),\n          calculateDistributionExpectedValueForPath(pathes[7]),\n          calculateDistributionExpectedValueForPath(pathes[8]),\n          calculateDistributionExpectedValueForPath(pathes[9]),\n          calculateDistributionExpectedValueForPath(pathes[10]),\n          calculateDistributionExpectedValueForPath(pathes[11]),\n          calculateDistributionExpectedValueForPath(pathes[12]),\n          calculateDistributionExpectedValueForPath(pathes[13]),\n          calculateDistributionExpectedValueForPath(pathes[14]),\n          calculateDistributionExpectedValueForPath(pathes[15]),\n          calculateDistributionExpectedValueForPath(pathes[16]),\n          calculateDistributionExpectedValueForPath(pathes[17]),\n        ), 2)\n      }\n        <br/>\n\n      </main>\n    );\n  }\n}\n"],"sourceRoot":""}