{"version":3,"sources":["webpack:///./src/functions/constants.ts","webpack:///./src/components/Path.tsx","webpack:///./src/models/PathModel.tsx","webpack:///./src/functions/functions.ts","webpack:///./src/pages/index.tsx"],"names":["Distribution","Path","props","render","DETERMINISTIC","BINOMIAL_DISTRIBUTION","CONTINUOUS_UNIFORM_DISTRIBUTION","EXPONENTIAL_DISTRIBUTION","GAMMA_DISTRIBUTION","GEOMETRICAL_DISTRIBUTION","NEGATIVE_BINOMIAL_DISTRIBUTION","NORMAL_DISTRIBUTION","PUASSON_DISTRIBUTION","nVisible","this","distribution","mVisible","rVisible","aVisible","bVisible","lambdaVisible","sigmaVisible","id","probability","lambda","sigma","a","b","m","n","r","s","setProbability","setDistribution","setA","setB","setM","setN","setR","setS","setLambda","setSigma","style","backgroundColor","display","width","height","margin","padding","type","onChange","event","Number","target","value","toString","min","step","max","React","PathModel","wEsFunction","W1","W2","W3","W4","W5","W6","W7","W8","W9","W10","W11","W12","W13","W14","W15","W16","W17","W18","deterministic","p","calculateDeterministic","pathes","result","forEach","path","calculateDistributionExpectedValueForPath","moment","binomialDistributionExpectedValueFunction","continuousUniformDistributionExpectedValueFunction","exponentialDistributionExpectedValueFunction","gammaDistributionExpectedValueFunction","negativeBinomialDistributionExpectedValueFunction","calculateDistributionSecondMomentForPath","binomialDistributionSecondMomentFunction","continuousUniformDistributionSecondMomentFunction","exponentialDistributionSecondMomentFunction","gammaDistributionSecondMomentFunction","negativeBinomialDistributionSecondMomentFunction","normalDistributionSecondMomentFunction","puassonDistributionSecondMomentFunction","App","state","map","setState","Math","abs","pow"],"mappings":"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","file":"component---src-pages-index-tsx-ffc61262150f582b0b8c.js","sourcesContent":["export enum Distribution {\n  DETERMINISTIC = 'Детермінована величина',\n  BINOMIAL_DISTRIBUTION = 'Біноміальний розподіл',\n  EXPONENTIAL_DISTRIBUTION = 'Експоненціальний розподіл',\n  GAMMA_DISTRIBUTION = 'Гамма розподіл',\n  GEOMETRICAL_DISTRIBUTION = 'Геометричний розподіл',\n  NEGATIVE_BINOMIAL_DISTRIBUTION = 'Від\\'ємний біноміальний розподіл',\n  NORMAL_DISTRIBUTION = 'Нормальний розподіл',\n  PUASSON_DISTRIBUTION = 'Розподіл Пуассона',\n  CONTINUOUS_UNIFORM_DISTRIBUTION = 'Рівномірний розподіл',\n}\n","import * as React from 'react';\nimport PathModel from '@/models/PathModel';\nimport { Distribution } from '@/functions/constants';\n\ninterface IProps extends PathModel {\n  setProbability: (probability: number) => void;\n  setDistribution: (distribution: string) => void;\n  setA: (a: number) => void;\n  setB: (b: number) => void;\n  setM: (M: number) => void;\n  setN: (n: number) => void;\n  setR: (r: number) => void;\n  setS: (s: number) => void;\n  setLambda: (lambda: number) => void;\n  setSigma: (sigma: number) => void;\n}\n\nexport default class Path extends React.Component<IProps> {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { DETERMINISTIC, BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n\n    const nVisible = (\n      this.props.distribution === BINOMIAL_DISTRIBUTION ||\n      this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const mVisible = this.props.distribution === NORMAL_DISTRIBUTION ? 'unset' : 'none';\n    const rVisible = this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION ? 'unset' : 'none';\n    const aVisible = (\n      this.props.distribution === EXPONENTIAL_DISTRIBUTION ||\n      this.props.distribution === GAMMA_DISTRIBUTION ||\n      this.props.distribution === CONTINUOUS_UNIFORM_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const bVisible = (\n      this.props.distribution === GAMMA_DISTRIBUTION ||\n      this.props.distribution === CONTINUOUS_UNIFORM_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const pVisible = (\n      this.props.distribution === BINOMIAL_DISTRIBUTION ||\n      this.props.distribution === GEOMETRICAL_DISTRIBUTION ||\n      this.props.distribution === NEGATIVE_BINOMIAL_DISTRIBUTION\n    ) ? 'unset' : 'none';\n    const lambdaVisible = this.props.distribution === PUASSON_DISTRIBUTION ? 'unset' : 'none';\n    const sigmaVisible = this.props.distribution === NORMAL_DISTRIBUTION ? 'unset' : 'none';\n    const {\n      id,\n      probability,\n      distribution,\n      lambda,\n      sigma,\n      a,\n      b,\n      m,\n      n,\n      r,\n      s,\n      setProbability,\n      setDistribution,\n      setA,\n      setB,\n      setM,\n      setN,\n      setR,\n      setS,\n      setLambda,\n      setSigma,\n    } = this.props;\n    return (\n      <div style={{\n        backgroundColor: 'sandybrown',\n        display: 'inline-grid',\n        width: '250px',\n        height: '270px',\n        margin: '0.5rem',\n        padding: '0.25rem',\n      }}>\n        <div>\n          <h3>Номер дуги: {id}</h3>\n          <span>s = </span>\n          <input type=\"number\" onChange={event => setS(Number(event.target.value))}\n                 value={s.toString()} min={0} step={0.01}\n                 style={{ width: '100px' }}\n          />\n          <br/>\n          <span>Ймовірність: <strong> {probability}</strong><br/></span>\n          <input type={'range'} onChange={event => setProbability(Number(event.target.value))}\n                 value={probability.toString()} min={0} max={1} step={0.01}/><br/>\n          Розподіл:<br/>\n          <select value={distribution}\n                  onChange={event => setDistribution(event.target.value)}>\n            <option value={DETERMINISTIC}>{DETERMINISTIC}</option>\n            <option value={BINOMIAL_DISTRIBUTION}>{BINOMIAL_DISTRIBUTION}</option>\n            <option value={EXPONENTIAL_DISTRIBUTION}>{EXPONENTIAL_DISTRIBUTION}</option>\n            <option value={GAMMA_DISTRIBUTION}>{GAMMA_DISTRIBUTION}</option>\n            <option value={GEOMETRICAL_DISTRIBUTION}>{GEOMETRICAL_DISTRIBUTION}</option>\n            <option value={NEGATIVE_BINOMIAL_DISTRIBUTION}>{NEGATIVE_BINOMIAL_DISTRIBUTION}</option>\n            <option value={NORMAL_DISTRIBUTION}>{NORMAL_DISTRIBUTION}</option>\n            <option value={PUASSON_DISTRIBUTION}>{PUASSON_DISTRIBUTION}</option>\n            <option value={CONTINUOUS_UNIFORM_DISTRIBUTION}>{CONTINUOUS_UNIFORM_DISTRIBUTION}</option>\n          </select>\n        </div>\n        <div style={{ display: nVisible }}>\n          <br/>\n          n = <input type={'number'} value={n} step={0.01}\n                     onChange={event => setN(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: mVisible }}>\n          <br/>\n          m = <input type={'number'} value={m} step={0.01}\n                     onChange={event => setM(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: rVisible }}>\n          <br/>\n          r = <input type={'number'} value={r} step={0.01}\n                     onChange={event => setR(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: aVisible }}>\n          <br/>\n          a = <input type=\"number\" value={a} step={0.01}\n                     onChange={event => setA(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: bVisible }}>\n          <br/>\n          b = <input type=\"number\" value={b} step={0.01}\n                     onChange={event => setB(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: lambdaVisible }}>\n          <br/>\n          lambda = <input type=\"number\" value={lambda} step={0.01}\n                          onChange={event => setLambda(Number(event.target.value))}/><br/>\n        </div>\n        <div style={{ display: sigmaVisible }}>\n          <br/>\n          sigma = <input type=\"number\" value={sigma} step={0.01}\n                         onChange={event => setSigma(Number(event.target.value))}/><br/>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Distribution } from '@/functions/constants';\n\nexport default class PathModel {\n  constructor(id: number, probability: number, distribution: Distribution, s: number, n: number, m: number, r: number, a: number, b: number, lambda: number, sigma: number) {\n    this.id = id;\n    this.probability = probability;\n    this.distribution = distribution;\n    this.s = s;\n    this.n = n;\n    this.m = m;\n    this.r = r;\n    this.a = a;\n    this.b = b;\n    this.lambda = lambda;\n    this.sigma = sigma;\n  }\n  id: number;\n  probability: number;\n  distribution: Distribution;\n  s: number;\n  n: number;\n  m: number;\n  r: number;\n  a: number;\n  b: number;\n  lambda: number;\n  sigma: number;\n}\n","import { Distribution } from '@/functions/constants';\nimport PathModel from '@/models/PathModel';\n\nexport function wEsFunction(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18) {\n  return ((W1 * W3 + W2 * W4 * W5 * W6) * W7 * W8 * (W9 * W11 + W10 * W12) * W13 * W16 * W17 * W18) / ((1 - W8 * (W9 * W11 + W10 * W12) * W13 * W14 * W15));\n}\n\nexport function deterministic(s, p) {\n  return s * (1/p);\n}\n\nexport function calculateDeterministic(pathes: Array<PathModel>) {\n  let result = 0;\n  pathes.forEach(path => {\n    result += deterministic(path.s, path.probability);\n  });\n  return result;\n}\n\nexport function binomialDistributionMomentGeneratingFunction(s: number, n: number, p: number) {\n  return Math.pow((p * Math.pow(Math.E, s) + 1 - p), n);\n}\n\nexport function exponentialDistributionMomentGeneratingFunction(s: number, a: number) {\n  return Math.pow((1 - (s / a)), -1);\n}\n\nexport function gammaDistributionMomentGeneratingFunction(s: number, a: number, b: number) {\n  return Math.pow((1 - (s / a)), (-1 * b));\n}\n\nexport function geometricalDistributionMomentGeneratingFunction(s: number, p: number) {\n  let nominator: number = p * Math.pow(Math.E, s);\n  let denominator: number = (1 - Math.pow(Math.E, s) + p * Math.pow(Math.E, s));\n  return (nominator / denominator);\n}\n\nexport function negativeBinomialDistributionMomentGeneratingFunction(s: number, p: number, r: number) {\n  return Math.pow(p / (1 - Math.pow(Math.E, s) + p * Math.pow(Math.E, s)), r);\n}\n\nexport function normalDistributionMomentGeneratingFunction(s: number, m: number, sigma: number) {\n  return Math.pow(Math.E, s * m + (1 / 2) * s * s * sigma * sigma);\n}\n\nexport function puassonDistributionMomentGeneratingFunction(s: number, lambda: number) {\n  return Math.pow(Math.E, lambda * (Math.pow(Math.E, s) - 1));\n}\n\nexport function continuousUniformDistributionMomentGeneratingFunction(s: number, a: number, b: number) {\n  let nominator: number = Math.pow(Math.E, s * a) - Math.pow(Math.E, s * b);\n  let denominator: number = (a - b) * s;\n  return (nominator / denominator);\n}\n\nexport function binomialDistributionExpectedValueFunction(n: number, p: number) {\n  return n * p;\n}\n\nexport function exponentialDistributionExpectedValueFunction(a: number) {\n  return 1 / a;\n}\n\nexport function gammaDistributionExpectedValueFunction(b: number, a: number) {\n  return b / a;\n}\n\nexport function geometricalDistributionExpectedValueFunction(p: number) {\n  return 1 / p;\n}\n\nexport function negativeBinomialDistributionExpectedValueFunction(r: number, p: number) {\n  return (r * (1 - p)) / p;\n}\n\nexport function normalDistributionExpectedValueFunction(m: number) {\n  return m;\n}\n\nexport function puassonDistributionExpectedValueFunction(lambda: number) {\n  return lambda;\n}\n\nexport function continuousUniformDistributionExpectedValueFunction(a: number, b: number) {\n  return (a + b) / 2;\n}\n\n\nexport function binomialDistributionSecondMomentFunction(n: number, p: number) {\n  return n * p * (n * p + 1 - p);\n}\n\nexport function exponentialDistributionSecondMomentFunction(a: number) {\n  return 2 / (a * a);\n}\n\nexport function gammaDistributionSecondMomentFunction(b: number, a: number) {\n  return b * (b + 1) / (a * a);\n}\n\nexport function geometricalDistributionSecondMomentFunction(p: number) {\n  return (2 - p) / (p * p);\n}\n\nexport function negativeBinomialDistributionSecondMomentFunction(r: number, p: number) {\n  return (r * (1 - p) * (1 + r - r * p)) / (p * p);\n}\n\nexport function normalDistributionSecondMomentFunction(m: number, sigma: number) {\n  return m * m + sigma * sigma;\n}\n\nexport function puassonDistributionSecondMomentFunction(lambda: number) {\n  return lambda * (1 + lambda);\n}\n\nexport function continuousUniformDistributionSecondMomentFunction(a: number, b: number) {\n  return (a * a + a * b + b * b) / 3;\n}\n\n\nexport function calculateDistributionMomentGeneratingFunctionForPath(path: PathModel, isSEqualZero: boolean) {\n  let moment: number;\n  let W: number;\n  const { a, distribution, sigma, lambda, probability, b, m, n, r } = path;\n  let s = isSEqualZero ? 0 : path.s;\n  const { DETERMINISTIC, BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n  switch (distribution) {\n    case DETERMINISTIC: {\n      moment = deterministic(s, probability);\n    }\n    case BINOMIAL_DISTRIBUTION: {\n      moment = binomialDistributionMomentGeneratingFunction(s, n, probability);\n      break;\n    }\n    case CONTINUOUS_UNIFORM_DISTRIBUTION: {\n      moment = continuousUniformDistributionMomentGeneratingFunction(s, a, b);\n      break;\n    }\n    case EXPONENTIAL_DISTRIBUTION: {\n      moment = exponentialDistributionMomentGeneratingFunction(s, a);\n      break;\n    }\n    case GAMMA_DISTRIBUTION: {\n      moment = gammaDistributionMomentGeneratingFunction(s, a, b);\n      break;\n    }\n    case GEOMETRICAL_DISTRIBUTION: {\n      moment = geometricalDistributionMomentGeneratingFunction(s, probability);\n      break;\n    }\n    case NEGATIVE_BINOMIAL_DISTRIBUTION: {\n      moment = negativeBinomialDistributionMomentGeneratingFunction(s, probability, r);\n      break;\n    }\n    case NORMAL_DISTRIBUTION: {\n      moment = normalDistributionMomentGeneratingFunction(s, m, sigma);\n      break;\n    }\n    case PUASSON_DISTRIBUTION: {\n      moment = puassonDistributionMomentGeneratingFunction(s, lambda);\n      break;\n    }\n  }\n  W = moment * probability;\n  return W;\n}\n\nexport function calculateDistributionExpectedValueForPath(path: PathModel) {\n  let moment: number;\n  let W: number;\n  const { a, distribution, lambda, probability, b, m, n, r, s } = path;\n  const { DETERMINISTIC, BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n  switch (distribution) {\n    case DETERMINISTIC: {\n      moment = deterministic(s, probability);\n    }\n    case BINOMIAL_DISTRIBUTION: {\n      moment = binomialDistributionExpectedValueFunction(n, probability);\n      break;\n    }\n    case CONTINUOUS_UNIFORM_DISTRIBUTION: {\n      moment = continuousUniformDistributionExpectedValueFunction(a, b);\n      break;\n    }\n    case EXPONENTIAL_DISTRIBUTION: {\n      moment = exponentialDistributionExpectedValueFunction(a);\n      break;\n    }\n    case GAMMA_DISTRIBUTION: {\n      moment = gammaDistributionExpectedValueFunction(a, b);\n      break;\n    }\n    case GEOMETRICAL_DISTRIBUTION: {\n      moment = geometricalDistributionExpectedValueFunction(probability);\n      break;\n    }\n    case NEGATIVE_BINOMIAL_DISTRIBUTION: {\n      moment = negativeBinomialDistributionExpectedValueFunction(probability, r);\n      break;\n    }\n    case NORMAL_DISTRIBUTION: {\n      moment = normalDistributionExpectedValueFunction(m);\n      break;\n    }\n    case PUASSON_DISTRIBUTION: {\n      moment = puassonDistributionExpectedValueFunction(lambda);\n      break;\n    }\n  }\n  W = moment * probability;\n  return W;\n}\n\nexport function calculateDistributionSecondMomentForPath(path: PathModel) {\n  let moment: number;\n  let W: number;\n  const { a, distribution, lambda, sigma, probability, b, m, n, r, s } = path;\n  const { DETERMINISTIC, BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n  switch (distribution) {\n    case DETERMINISTIC: {\n      moment = deterministic(s, probability);\n    }\n    case BINOMIAL_DISTRIBUTION: {\n      moment = binomialDistributionSecondMomentFunction(n, probability);\n      break;\n    }\n    case CONTINUOUS_UNIFORM_DISTRIBUTION: {\n      moment = continuousUniformDistributionSecondMomentFunction(a, b);\n      break;\n    }\n    case EXPONENTIAL_DISTRIBUTION: {\n      moment = exponentialDistributionSecondMomentFunction(a);\n      break;\n    }\n    case GAMMA_DISTRIBUTION: {\n      moment = gammaDistributionSecondMomentFunction(a, b);\n      break;\n    }\n    case GEOMETRICAL_DISTRIBUTION: {\n      moment = geometricalDistributionSecondMomentFunction(probability);\n      break;\n    }\n    case NEGATIVE_BINOMIAL_DISTRIBUTION: {\n      moment = negativeBinomialDistributionSecondMomentFunction(probability, r);\n      break;\n    }\n    case NORMAL_DISTRIBUTION: {\n      moment = normalDistributionSecondMomentFunction(m, sigma);\n      break;\n    }\n    case PUASSON_DISTRIBUTION: {\n      moment = puassonDistributionSecondMomentFunction(lambda);\n      break;\n    }\n  }\n  W = moment * probability;\n  return W;\n}\n","import * as React from 'react';\nimport Path from '@/components/Path';\nimport { Distribution } from '@/functions/constants';\nimport PathModel from '@/models/PathModel';\nimport {\n  calculateDeterministic,\n  calculateDistributionExpectedValueForPath,\n  calculateDistributionMomentGeneratingFunctionForPath,\n  calculateDistributionSecondMomentForPath,\n  wEsFunction,\n} from '@/functions/functions';\n\nconst { DETERMINISTIC, BINOMIAL_DISTRIBUTION, CONTINUOUS_UNIFORM_DISTRIBUTION, EXPONENTIAL_DISTRIBUTION, GAMMA_DISTRIBUTION, GEOMETRICAL_DISTRIBUTION, NEGATIVE_BINOMIAL_DISTRIBUTION, NORMAL_DISTRIBUTION, PUASSON_DISTRIBUTION } = Distribution;\n\n\ninterface IProps {\n}\n\ninterface IState {\n  pathes: Array<PathModel>\n}\n\nexport default class App extends React.Component<IProps, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pathes: [\n        new PathModel(1, 0.6, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(2, 0.4, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(3, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(4, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(5, 1, GAMMA_DISTRIBUTION, 2, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(6, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(7, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(8, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(9, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(10, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(11, 1, NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 0.01767766952),\n        new PathModel(12, 1,NORMAL_DISTRIBUTION, 0, 1, 1, 1, 1, 1, 1, 0.00707106781),\n        new PathModel(13, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(14, 0.05, DETERMINISTIC, 10, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(16, 1, DETERMINISTIC, 1, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(15, 0.95, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(17, 1, DETERMINISTIC, 0, 1, 1, 1, 1, 1, 1, 1),\n        new PathModel(18, 1, NORMAL_DISTRIBUTION, 0.5, 1, 1, 1, 1, 1, 1, 0.01060660171),\n      ],\n    };\n  }\n\n  render() {\n    const { pathes } = this.state;\n    return (\n      <main>\n        <div style={{ display: 'flex' }}>\n          <div>\n            {pathes.map(\n              path => <Path id={path.id}\n                            probability={path.probability}\n                            distribution={path.distribution}\n                            s={path.s}\n                            m={path.m}\n                            r={path.r}\n                            n={path.n}\n                            a={path.a}\n                            b={path.b}\n                            lambda={path.lambda}\n                            sigma={path.sigma}\n                            setProbability={(probability: number) => {\n                              let pathes = this.state.pathes;\n                              path.probability = probability;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setDistribution={(distribution: Distribution) => {\n                              let pathes = this.state.pathes;\n                              path.distribution = distribution;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setA={(a: number) => {\n                              let pathes = this.state.pathes;\n                              path.a = a;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setB={(b: number) => {\n                              let pathes = this.state.pathes;\n                              path.b = b;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setM={(m: number) => {\n                              let pathes = this.state.pathes;\n                              path.m = m;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setN={(n: number) => {\n                              let pathes = this.state.pathes;\n                              path.n = n;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setR={(r: number) => {\n                              let pathes = this.state.pathes;\n                              path.r = r;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setS={(s: number) => {\n                              let pathes = this.state.pathes;\n                              path.s = s;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setLambda={(lambda: number) => {\n                              let pathes = this.state.pathes;\n                              path.lambda = lambda;\n                              this.setState({ pathes: pathes });\n                            }}\n                            setSigma={(sigma: number) => {\n                              let pathes = this.state.pathes;\n                              path.sigma = sigma;\n                              this.setState({ pathes: pathes });\n                            }}\n\n              />,\n            )}\n\n          </div>\n        </div>\n        Результати: <br/>\n        µ = {(Math.abs(wEsFunction(\n        calculateDistributionExpectedValueForPath(pathes[0]),\n        calculateDistributionExpectedValueForPath(pathes[1]),\n        calculateDistributionExpectedValueForPath(pathes[2]),\n        calculateDistributionExpectedValueForPath(pathes[3]),\n        calculateDistributionExpectedValueForPath(pathes[4]),\n        calculateDistributionExpectedValueForPath(pathes[5]),\n        calculateDistributionExpectedValueForPath(pathes[6]),\n        calculateDistributionExpectedValueForPath(pathes[7]),\n        calculateDistributionExpectedValueForPath(pathes[8]),\n        calculateDistributionExpectedValueForPath(pathes[9]),\n        calculateDistributionExpectedValueForPath(pathes[10]),\n        calculateDistributionExpectedValueForPath(pathes[11]),\n        calculateDistributionExpectedValueForPath(pathes[12]),\n        calculateDistributionExpectedValueForPath(pathes[13]),\n        calculateDistributionExpectedValueForPath(pathes[14]),\n        calculateDistributionExpectedValueForPath(pathes[15]),\n        calculateDistributionExpectedValueForPath(pathes[16]),\n        calculateDistributionExpectedValueForPath(pathes[17]),\n      ))) + calculateDeterministic(pathes) - 191.654102676},<br/>\n        σ<sup>2</sup> = {(Math.abs(\n        wEsFunction(\n          calculateDistributionSecondMomentForPath(pathes[0]),\n          calculateDistributionSecondMomentForPath(pathes[1]),\n          calculateDistributionSecondMomentForPath(pathes[2]),\n          calculateDistributionSecondMomentForPath(pathes[3]),\n          calculateDistributionSecondMomentForPath(pathes[4]),\n          calculateDistributionSecondMomentForPath(pathes[5]),\n          calculateDistributionSecondMomentForPath(pathes[6]),\n          calculateDistributionSecondMomentForPath(pathes[7]),\n          calculateDistributionSecondMomentForPath(pathes[8]),\n          calculateDistributionSecondMomentForPath(pathes[9]),\n          calculateDistributionSecondMomentForPath(pathes[10]),\n          calculateDistributionSecondMomentForPath(pathes[11]),\n          calculateDistributionSecondMomentForPath(pathes[12]),\n          calculateDistributionSecondMomentForPath(pathes[13]),\n          calculateDistributionSecondMomentForPath(pathes[14]),\n          calculateDistributionSecondMomentForPath(pathes[15]),\n          calculateDistributionSecondMomentForPath(pathes[16]),\n          calculateDistributionSecondMomentForPath(pathes[17]),\n        ) - Math.pow(wEsFunction(\n          calculateDistributionExpectedValueForPath(pathes[0]),\n          calculateDistributionExpectedValueForPath(pathes[1]),\n          calculateDistributionExpectedValueForPath(pathes[2]),\n          calculateDistributionExpectedValueForPath(pathes[3]),\n          calculateDistributionExpectedValueForPath(pathes[4]),\n          calculateDistributionExpectedValueForPath(pathes[5]),\n          calculateDistributionExpectedValueForPath(pathes[6]),\n          calculateDistributionExpectedValueForPath(pathes[7]),\n          calculateDistributionExpectedValueForPath(pathes[8]),\n          calculateDistributionExpectedValueForPath(pathes[9]),\n          calculateDistributionExpectedValueForPath(pathes[10]),\n          calculateDistributionExpectedValueForPath(pathes[11]),\n          calculateDistributionExpectedValueForPath(pathes[12]),\n          calculateDistributionExpectedValueForPath(pathes[13]),\n          calculateDistributionExpectedValueForPath(pathes[14]),\n          calculateDistributionExpectedValueForPath(pathes[15]),\n          calculateDistributionExpectedValueForPath(pathes[16]),\n          calculateDistributionExpectedValueForPath(pathes[17]),\n        ), 2)))/0.03735489\n      }\n        <br/>\n\n      </main>\n    );\n  }\n}\n"],"sourceRoot":""}